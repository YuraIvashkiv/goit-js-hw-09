{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,wBACpCI,aAAcL,SAASC,cAAc,0BAgCvC,SAASK,EAAgBC,GACvB,OAAOC,SAASD,E,CAElB,SAASE,EAAcC,EAAUC,GAC5B,MAAMC,EAAgBC,KAAKC,SAAW,GACzC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACxBC,YAAW,KACRN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA1Cbb,EAAKC,KAAKoB,iBAAiB,UAEvB,SAAoBC,GACpBA,EAAMC,iBAET,IAAIC,EAAQhB,EAAgBR,EAAKI,WAAWK,OAC3C,MAAMgB,EAAOjB,EAAgBR,EAAKK,UAAUI,OACtCiB,EAASlB,EAAgBR,EAAKM,YAAYG,OAE9CT,EAAKI,WAAWK,MAAQ,GAC1BT,EAAKK,UAAUI,MAAQ,GACvBT,EAAKM,YAAYG,MAAQ,GAEvB,IAAK,IAAIkB,EAAI,EAAGA,GAAKD,EAAQC,GAAG,EAAG,CAGd,IAAIhB,EAFNgB,EAE8BH,GAG1CI,MAAK,EAAChB,SAAEA,EAAQC,MAAEA,MACjBf,EAAA+B,OAAOC,QAAQ,uBAAqBlB,QAAiBC,MAAU,IAEpEkB,OAAO,EAACnB,SAAEA,EAAQC,MAAEA,MACjBf,EAAA+B,OAAOG,QAAQ,sBAAoBpB,QAAeC,MAAU,IAGhEW,GAASC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  submitButton: document.querySelector('button[type=\"submit\"]'),\n}\nrefs.form.addEventListener('submit', FormSubmit) \n  \n    function FormSubmit(event){\n    event.preventDefault();\n    \n let delay = cleanInputValue(refs.delayInput.value);\n  const step = cleanInputValue(refs.stepInput.value);\n  const amount = cleanInputValue(refs.amountInput.value);\n\n    refs.delayInput.value = '';\n  refs.stepInput.value = '';\n  refs.amountInput.value = '';\n\n    for (let i = 1; i <= amount; i+=1) {\n      const position = i;\n    \n        const promise =  new createPromise(position, delay);\n\n        promise\n          .then(({ position, delay }) => {\n            Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          })\n      .catch (({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n      \n      delay += step\n  }\n}\n\nfunction cleanInputValue(value){\n  return parseInt(value)\n};\nfunction createPromise(position, delay) {\n     const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n       setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n\n\n\n\n\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delayInput","stepInput","amountInput","submitButton","$47d4ff9957288465$var$cleanInputValue","value","parseInt","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delay1","step","amount","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.87d07af9.js.map"}